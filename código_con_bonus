import heapq
import json
from datetime import datetime

class Tarea:
    def __init__(self, nombre, prioridad, fecha_vencimiento, dependencias=None):
        self.nombre = nombre
        self.prioridad = int(prioridad)
        self.fecha_vencimiento = datetime.strptime(fecha_vencimiento, '%Y-%m-%d')
        self.dependencias = dependencias if dependencias else []

    def es_ejecutable(self, completadas):
        return all(dep in completadas for dep in self.dependencias)

    def __lt__(self, otra):
        if self.prioridad == otra.prioridad:
            return self.fecha_vencimiento < otra.fecha_vencimiento
        return self.prioridad < otra.prioridad

    def to_dict(self):
        return {
            'nombre': self.nombre,
            'prioridad': self.prioridad,
            'fecha_vencimiento': self.fecha_vencimiento.strftime('%Y-%m-%d'),
            'dependencias': self.dependencias
        }

    @staticmethod
    def from_dict(data):
        return Tarea(
            data['nombre'],
            data['prioridad'],
            data['fecha_vencimiento'],
            data.get('dependencias', [])
        )

class GestorTareas:
    def __init__(self, archivo='tareas.json'):
        self.archivo = archivo
        self.tareas = []
        self.completadas = set()
        self.cargar_datos()

    def guardar_datos(self):
        with open(self.archivo, 'w') as f:
            datos = [t.to_dict() for t in self.tareas]
            json.dump({'tareas': datos, 'completadas': list(self.completadas)}, f)

    def cargar_datos(self):
        try:
            with open(self.archivo, 'r') as f:
                datos = json.load(f)
                self.tareas = [Tarea.from_dict(t) for t in datos['tareas']]
                self.completadas = set(datos['completadas'])
                heapq.heapify(self.tareas)
        except FileNotFoundError:
            self.tareas = []
            self.completadas = set()

    def añadir_tarea(self, nombre, prioridad, fecha, dependencias):
        if not nombre or not str(prioridad).isdigit():
            print("Error: nombre vacío o prioridad no válida.")
            return
        tarea = Tarea(nombre, prioridad, fecha, dependencias)
        heapq.heappush(self.tareas, tarea)
        self.guardar_datos()

    def mostrar_tareas(self):
        pendientes = [t for t in self.tareas if t.nombre not in self.completadas]
        for t in sorted(pendientes):
            print(f"{t.nombre} | Prioridad: {t.prioridad} | Vence: {t.fecha_vencimiento.date()} | Depende de: {t.dependencias}")

    def completar_tarea(self, nombre):
        if not self.tareas:
            print("No hay tareas para completar.")
            return
        if nombre in self.completadas:
            print(f"La tarea '{nombre}' ya estaba completada.")
            return
        nombres_tareas = [t.nombre for t in self.tareas]
        if nombre not in nombres_tareas:
            print(f"La tarea '{nombre}' no se encuentra en la lista de tareas pendientes.")
            return
        self.completadas.add(nombre)
        self.tareas = [t for t in self.tareas if t.nombre != nombre]
        heapq.heapify(self.tareas)
        self.guardar_datos()
        print(f"Tarea '{nombre}' completada correctamente.")

    def obtener_tarea_mayor_prioridad(self):
        tareas_validas = [t for t in self.tareas if t.nombre not in self.completadas and t.es_ejecutable(self.completadas)]
        if tareas_validas:
            mejor = min(tareas_validas)
            print(f"Próxima tarea: {mejor.nombre} | Prioridad: {mejor.prioridad} | Vence: {mejor.fecha_vencimiento.date()}")
        else:
            print("No hay tareas disponibles o sus dependencias no están completas.")

# Menú interactivo
if __name__ == "__main__":
    gestor = GestorTareas()

    while True:
        print("\n--- MENÚ ---")
        print("1. Añadir tarea")
        print("2. Mostrar tareas pendientes")
        print("3. Completar tarea")
        print("4. Obtener siguiente tarea de mayor prioridad")
        print("5. Salir")
        opcion = input("Elige una opción: ")

        if opcion == "1":
            nombre = input("Nombre de la tarea: ")
            prioridad = input("Prioridad (entero): ")
            fecha = input("Fecha de vencimiento (YYYY-MM-DD): ")
            deps = input("Dependencias (separadas por coma, si hay): ").split(",") if input("¿Tiene dependencias? (s/n): ").lower() == "s" else []
            deps = [d.strip() for d in deps if d.strip()]
            gestor.añadir_tarea(nombre, prioridad, fecha, deps)
        elif opcion == "2":
            gestor.mostrar_tareas()
        elif opcion == "3":
            nombre = input("Nombre de la tarea a completar: ")
            gestor.completar_tarea(nombre)
        elif opcion == "4":
            gestor.obtener_tarea_mayor_prioridad()
        elif opcion == "5":
            break
        else:
            print("Opción no válida.")
